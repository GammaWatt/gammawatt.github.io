{"version":3,"file":"component---src-pages-index-tsx-030be3a16ddd941232f6.js","mappings":"6KA0HA,UAnHkB,SAAC,GAAD,IAAGA,EAAH,EAAGA,KAAH,OAChB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKC,MAAM,SACX,uCACA,sEACA,mUAOA,kIAIA,mPAKA,usBAYA,+CACqB,gBAAC,EAAAC,KAAD,CAAMC,GAAG,UAAT,QADrB,yCAEkB,gBAAC,EAAAD,KAAD,CAAMC,GAAG,aAAT,SAElB,kvBAaA,wqBAYA,kNAKA,0BAAI,gBAAC,EAAAD,KAAD,CAAMC,GAAG,SAAT,aACJ,uBAAKC,MAAO,CAAEC,QAAS,OAAQC,SAAU,OAAQC,eAAgB,iBAE7D,CACE,CAAC,eAAgB,SACjB,CAAC,yBAA0B,mBAC3B,CAAC,iBAAkB,WACnB,CAAC,oBAAqB,cACtB,CAAC,mBAAoB,aACrB,CAAC,mCAAoC,8BAEtCC,KAAK,SAAAC,GAAC,OACL,gBAAC,EAAAP,KAAD,CACEQ,IAAMC,KAAKC,SACXT,GAAIM,EAAE,GACNL,MAAO,CAAES,KAAM,UAAWC,aAAc,OAAQC,UAAW,qCAE3D,2BACE,sBAAIX,MAAO,CAAEY,UAAW,WAAaP,EAAE,UAMjD,0BAAI,gBAAC,EAAAP,KAAD,CAAMC,GAAG,SAAT,SACJ,uBAAKC,MAAO,CAAEC,QAAS,OAAQE,eAAgB,iBAE3CP,EAAKiB,OAAOC,MAAMC,MAAM,EAAE,GACzBC,QAAQ,SAAAX,GAAC,QAAMA,EAAEY,KAAKC,YAAYC,QAClCf,KAAK,SAAAC,GAAC,OACL,uBAAKC,IAAMD,EAAEY,KAAKG,GAAKpB,MAAO,CAAES,KAAM,IAAKY,OAAQ,cAAeC,QAAS,UAAWC,OAAQ,kBAAmBb,aAAc,SAC7H,0BAAI,gBAAC,EAAAZ,KAAD,CAAMC,GAAE,SAAYM,EAAEY,KAAKC,YAAYM,MAAWnB,EAAEY,KAAKC,YAAYrB,QACzE,yBAAKQ,EAAEY,KAAKQ,cAKpB,0BAAI,gBAAC,EAAA3B,KAAD,CAAMC,GAAG,aAAT,aACJ,0BAAI,gBAAC,EAAAD,KAAD,CAAMC,GAAG,cAAT","sources":["webpack://gammawatt-website/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <Seo title=\"Home\" />\n    <h1>Hi people</h1>\n    <p>Welcome to my site and personal notebook.</p>\n    <p>\n      This site is currently under heavy construction, so there will be a lot\n      random, ugly, and unformatted content, artifacts, and text areas only\n      containing test text. These artifacts should only be glaringly obvious\n      for a little while longer, as I properly build the site and fill out the\n      content.\n    </p>\n    <p>\n      Here, you'll find an archive of my projects, experiments, thoughts, work\n      history, and personal notes.\n    </p>\n    <p>\n      This website is meant to serve as my introduction to any curious to know \n      about me and my activities, as well as a personal knowledgebase where I\n      can refresh my memory on various topics and common issues I run into.\n    </p>\n    <p>\n      As a note about what to expect regarding my notes: I tend to try to keep\n      things as concise and content rich as possible, because I don't like \n      reading through excesses of information to find the one snippet to solve\n      my problem. So, I like to try to format things as if they were really \n      short cheatsheets. This means that, in order to make use of the \n      information, it will require prior understanding of, and familiarity with,\n      the material covered; unless it is meant to be a tutorial, or I am writing\n      about something that is brand new to me. I may succeed at keeping things\n      concise, or I may only be fooling myself. Either way, that is my intent\n      behind how I try to format my content.\n    </p>\n    <p>\n      You can view my CV <Link to=\"/cv/cv\">Here</Link> and you can view the \n      Spanish version <Link to='/cv/cv_es'>Here</Link>\n    </p>\n    <p>\n      As a personal reminder to myself, it seems that the most important aspect\n      of learning (and, likely, teaching) is fixing things that go wrong;\n      understanding why they were broken to begin with, and why the fix worked.\n      So, it's likely going to be extremely important for me, going forward, to\n      write down notes about different kinds of breaks, and even simulate for\n      myself how to make a specific kind of break on purpose, so I know what\n      went wrong and why, and then apply the corresponding fix. An example of\n      this, would be to write a sample app in C and then purposefully cause\n      segfaults by several different means, make the corresponding fixes for\n      each cause, and take notes about it so I remember this understanding for\n      later.\n    </p>\n    <p>\n      A lot of the information, here, has been born out of the various\n      requirements listed in job applications; since knowledge of industry tools\n      is required in order to get work. I never agreed with many of the\n      decisions regading various techstacks, as they almost always seem more\n      cumbersome and bloated that they're worth, and tend to show bandwagon\n      riding more than they show knowledge about what is available. But, \n      whatever. It is what it is and I don't get to choose what these people ask\n      for or what their teams want to use. There's probably some justifying\n      benefit I'm oblivious to. Either way, I just have to learn how to use the\n      tools effectively.\n    </p>\n    <p>\n      So, a lot of pages in my notes will also cover common interview questions\n      and solutions, as well as algorithms, common integration and\n      infrastructure challenges, and talking points.\n    </p>\n    <h2><Link to=\"notes\">Notebook</Link></h2>\n    <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around' }}>\n      {\n        [\n          ['/notes/tools', 'Tools'],\n          ['/notes/software-design', 'Software Design'],\n          ['/notes/hobbies', 'Hobbies'],\n          ['/notes/frameworks', 'Frameworks'],\n          ['/notes/workflows', 'Workflows'],\n          ['/notes/development-methodologies', 'Development Methodologies'],\n        ]\n        .map( e => (\n          <Link\n            key={ Math.random() }\n            to={e[0]}\n            style={{ flex: '1 0 25%', borderRadius: '15px', boxShadow: '2px 2px 2px hsla(0, 0%, 0%, 0.7)'}}\n          >\n            <div>\n              <h3 style={{ textAlign: 'center' }}>{e[1]}</h3>\n            </div>\n          </Link>\n        ) )\n      }\n    </div>\n    <h2><Link to=\"/blog\">Blog</Link></h2>\n    <div style={{ display: 'flex', justifyContent: 'space-around'}}>\n      {\n        data.allMdx.edges.slice(0,3)\n        .filter( e => !!e.node.frontmatter.date )\n        .map( e => (\n          <div key={ e.node.id } style={{ flex: '1', margin: '0.5rem auto', padding: '0.75rem', border: '1px solid black', borderRadius: '15px' }}>\n            <h3><Link to={ `/blog/${e.node.frontmatter.slug}` }>{ e.node.frontmatter.title }</Link></h3>\n            <p>{ e.node.excerpt }</p>\n          </div>\n        ) )\n      }\n    </div>\n    <h2><Link to='/projects'>Projects</Link></h2>\n    <h2><Link to='/portfolio'>Portfolio</Link></h2>\n    { /* \n         <p>\n         <Link to=\"/page-2/\">Go to page 2</Link> <br />\n         <Link to=\"/using-typescript/\">Go to &#34;Using TypeScript&#34;</Link>\n         </p>\n       */ }\n  </Layout>\n);\n\nexport default IndexPage;\n\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["data","title","Link","to","style","display","flexWrap","justifyContent","map","e","key","Math","random","flex","borderRadius","boxShadow","textAlign","allMdx","edges","slice","filter","node","frontmatter","date","id","margin","padding","border","slug","excerpt"],"sourceRoot":""}